// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  password String
}
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  password String
  username String @unique
  status Status @default(ACTIVE)
  createdAt DateTime @default(now())
  groups Group[]
  comments Comment[]
  documentComments DocumentComment[]
  videoComments VideoComment[]
  memberships Member[]
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  groupName String @unique
  image String
  description String
  admin User @relation(fields: [adminId], references: [id])
  adminId String @db.ObjectId
  type GroupType
  status Status @default(ACTIVE)
  createdAt DateTime @default(now())
  members Member[]
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  image String
  title String
  body String
  createdAt DateTime @default(now())
  comments Comment[]
}

model Video {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  image String
  title String @unique
  description String
  url String
  comments VideoComment[]
}

model Document {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  image String
  title String @unique
  description String
  comments DocumentComment[]
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  group Group @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  author User @relation(fields: [authorId], references: [id])
  authorId  String @db.ObjectId
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  parent Comment? @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId
  childComments Comment[] @relation("ChildComments")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentComment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  author User @relation(fields: [authorId], references: [id])
  authorId  String @db.ObjectId
  post Document @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  parent DocumentComment? @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId
  childComments DocumentComment[] @relation("ChildComments")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoComment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  author User @relation(fields: [authorId], references: [id])
  authorId  String @db.ObjectId
  video Video @relation(fields: [videoId], references: [id])
  videoId String @db.ObjectId
  parent VideoComment? @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId
  childComments VideoComment[] @relation("ChildComments")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscriber {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

enum Status {
  ACTIVE
  INACTIVE
}

enum GroupType {
  PUBLIC
  PRIVATE
}
